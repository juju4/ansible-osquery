---
name: default-bare

on:
  push:
  pull_request:
  schedule:  # run weekly, every monday 03:00
    - cron: '0 3 * * 1'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: false
            apparmor_fix: true
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: false
            apparmor_fix: false
          - distribution: ubuntu
            version: '24.04'
            suite: default-schedule
            experimental: false
            apparmor_fix: true
          - distribution: ubuntu
            version: '24.04-arm'
            suite: default
            experimental: false
            apparmor_fix: true
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: juju4.osquery
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ls -l /opt/hostedtoolcache/Python/3.9.1/x64/bin || true
          echo "/opt/hostedtoolcache/Python/3.9.1/x64/bin" >> $GITHUB_PATH
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          ansible --version
          ansible-config dump --only-changed -t all
          pwd
          env
          find -ls
          dpkg -l | grep apparmor
          sudo ls -l /etc/apparmor.d/*firefox*
      - name: Apparmor workaround
        run: |
          sudo rm /etc/apparmor.d/firefox /etc/apparmor.d/usr.bin.firefox
          sudo systemctl restart apparmor
        if: ${{ matrix.apparmor_fix }}
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: verify
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/verify.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
          ps axuw
          netstat -anp
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          set -x
          systemctl -l --no-pager status osqueryd || true
          systemd-analyze security osqueryd || true
          systemctl --failed || true
          systemctl status osqueryd || true
          cat /lib/systemd/system/osqueryd.service
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - files
        run: |
          dpkg -L osquery
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery
        run: |
          set -x
          cat /etc/osquery/osquery.conf || true
          osqueryi --line "SELECT version, build, platform FROM os_version;" || true
          osqueryi --line "SELECT version from osquery_info;" || true
          osqueryi --config_dump --verbose || true
          osqueryi --config_check --verbose || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery packs
        run: |
          set -x
          cat /opt/osquery/share/osquery/packs/osquery-custom-pack.conf || true
          cat /opt/osquery/share/osquery/packs/osquery-snapshots-pack.conf || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery ERROR/WARNING/INFO
        run: |
          sudo cat /var/log/osquery/osqueryd.{ERROR,WARNING,INFO}
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery results logs
        run: |
          set -x
          ls -lAF /var/log/osquery/
          sudo head -10 /var/log/osquery/osqueryd.results.log
          sudo tail -100 /var/log/osquery/osqueryd.results.log
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery results logs via jq
        run: |
          sudo /usr/local/scripts/osquery_report.sh
          sudo cat /var/tmp/osquery-report-*
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - resulting systemd config
        run: |
          find /etc/systemd/system/osqueryd.service.d/ -type f -exec cat {} \;
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - apparmor
        run: |
          set -x
          sudo grep -r "runbindable*/*" /etc/apparmor.d || true
          sudo grep -r 'mount.*->' /etc/apparmor.d || true
          sudo ls -l /etc/apparmor.d/usr.bin.osqueryd || true
          sudo ls -l /etc/apparmor.d/*firefox* || true
          sudo find /etc/apparmor* -iname '*osquery*' || true
          sudo cat /etc/apparmor.d/usr.bin.osqueryd || true
          sudo cat /etc/apparmor.d/opt.osquery.bin.osqueryd || true
          dpkg -l | grep apparmor
        if: ${{ always() }}
        continue-on-error: true
