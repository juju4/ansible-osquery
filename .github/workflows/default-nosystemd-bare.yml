---
name: default-bare

on:
  push:
  pull_request:
  schedule:  # run weekly, every monday 03:00
    - cron: '0 3 * * 1'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: "-e osquery_systemd_restriction_enable=false"

    steps:
      - uses: actions/checkout@v3
        with:
          path: juju4.osquery
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ls -l /opt/hostedtoolcache/Python/3.9.1/x64/bin || true
          echo "/opt/hostedtoolcache/Python/3.9.1/x64/bin" >> $GITHUB_PATH
          ansible --version
          cd $GITHUB_WORKSPACE/juju4.osquery
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          pwd
          env
          find -ls
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/juju4.osquery && ansible-playbook -i localhost, --connection=local --become -vvv molecule/default/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/juju4.osquery && ansible-playbook -i localhost, --connection=local --become -vvv molecule/default/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 1)
        continue-on-error: true
      - name: On failure
        run: |
          systemctl -l --no-pager status
        if: env.WORKFLOW_CONCLUSION == 'failure'  # notify only if failure
      - name: After script - systemctl
        run: |
          systemd-analyze security osqueryd || true
          systemctl --failed || true
          systemctl status osqueryd || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery
        run: |
          cat /etc/osquery/osquery.conf || true
          osqueryi --config_dump --verbose
          osqueryi --config_check --verbose
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery ERROR/WARNING/INFO
        run: |
          sudo cat /var/log/osquery/osqueryd.{ERROR,WARNING,INFO}
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery results logs
        run: |
          sudo tail -100 /var/log/osquery/osqueryd.results.log
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - osquery results logs via jq
        run: |
          sudo /usr/local/scripts/osquery_report.sh
          sudo cat /var/tmp/osquery-report-*
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - resulting systemd config
        run: |
          find /etc/systemd/system/osqueryd.service.d/ -type f -exec cat {} \;
        if: ${{ always() }}
        continue-on-error: true
