---
dist: xenial
sudo: required
rvm:
  - 2.6

env:
  - distribution: centos
    version: 8
    suite: default
  - distribution: centos
    version: 7
    suite: default
  - distribution: ubuntu
    version: 20.04
    suite: default
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: ubuntu
    version: 18.04
    suite: default
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: ubuntu
    version: 16.04
    suite: default
  - distribution: centos
    version: 8
    suite: default-osquery-syslog
  - distribution: ubuntu
    version: 18.04
    suite: default-osquery-syslog
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: centos
    version: 8
    suite: default-osquery-syslog-fs
  - distribution: ubuntu
    version: 18.04
    suite: default-osquery-syslog-fs
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: ubuntu
    version: 18.04
    suite: default-profiling
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3 -e osquery_fallocate_args=\"-x\" '"
#  - distribution: centos
#    version: 8
#    suite: default-fimfiles
#    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
#  - distribution: ubuntu
#    version: 20.04
#    suite: default-fimfiles
#    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
#  - distribution: ubuntu
#    version: 18.04
#    suite: default-fimfiles
#    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: ubuntu
    version: 20.04
    suite: default-auditd
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"
  - distribution: ubuntu
    version: 20.04
    suite: default-fleetmanager
    ANSIBLE_EXTRA_FLAGS: "'-e ansible_python_interpreter=/usr/bin/python3'"

before_install:
  - env
  - pwd
  - find -ls
  - "[ -f get-dependencies.sh ] && sh -x get-dependencies.sh"
  - echo "deb http://archive.ubuntu.com/ubuntu xenial-backports main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/xenial-backports.list
  - sudo apt-get update -qq
  - sudo apt -t xenial-backports -y install lxd acl dnsmasq-base zfsutils-linux rng-tools -q
  # https://github.com/travis-ci/travis-ci/issues/1839   or chain: sudo -E su $USER -c "..."
  - sudo usermod -G lxd travis
  # Pull container
  - sudo -E su $USER -c "lxc remote list"
  - sudo -E su $USER -c "lxc image list"
  # pre-download base images
  - 'sudo -E su $USER -c "[ ${distribution} == ubuntu ] || lxc image copy images:${distribution}/${version}/amd64 local: --alias=${distribution}-${version}-nossh"'
  - 'sudo -E su $USER -c "[ ${distribution} == ubuntu ] && lxc image copy ubuntu:${version} local: --alias=${distribution}-${version}" || true'
  - sudo -E su $USER -c "lxc image list"
  # configure network
  - ifconfig -a
  - sudo lxc info
  - sudo lxc network list
  - sudo lxc network create lxdbr0
  - sudo lxc network show lxdbr0
  - sudo lxc network attach-profile lxdbr0 default ens4
  - sudo lxc profile device get default ens4 nictype || true
  - sudo service lxd restart
  - ps ax | grep dnsmasq
  - systemctl status -l --no-pager lxd || true
  - cat /etc/network/interfaces.d/50-cloud-init.cfg
  - sudo lxc network list
  # configure storage pool
  - sudo lxc storage list
  - sudo lxc storage create pool1 zfs
  - sudo lxc storage list
  - sudo zpool list
  - sudo lxc profile device add default root disk path=/ pool=pool1
  - sudo lxc profile show default

  - sudo pip install ansible ansible-lint
  - 'echo "gem: --no-document" >> ~/.gemrc'
  - gem install test-kitchen --version "=1.25.0"
  - gem install kitchen-ansible
  - gem install kitchen-sync
  - gem install kitchen-lxd_cli
  - gem list
  - which kitchen
  # ssh key for lxd_cli ?
  - ls ~/.ssh
  - ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -P ""
  # sudo/su get us a non-usual PATH ...
  - '[ "X${distribution}" == "Xcentos" ] && sudo -E su $USER -c "sh -x ./test/lxd/centos-ssh-image.sh ${version}" || true'
  - sudo -E su $USER -c "env"
  - sudo -E su $USER -c "env PATH=$PATH kitchen diagnose --all"
  # - sudo -E su $USER -c "kitchen diagnose --all"
  # - sudo -E -u $USER kitchen diagnose --all

  - sudo sysctl -w fs.inotify.max_user_watches=524288
  - sudo sysctl -w fs.inotify.max_user_instances=256
  - sudo sysctl -w fs.inotify.max_queued_events=32768

script:
  - ansible-lint tasks/main.yml || true
  # - KITCHEN_LOCAL_YAML=.kitchen.local.yml bundle exec kitchen verify ${INSTANCE}
  - sudo -E su $USER -c "env PATH=$PATH kitchen verify ${suite}-${distribution}-${version//./} -l debug || (cat $HOME/.kitchen/logs/${suite}-${distribution}-${version//./}.log; find /tmp/kitchen)"

after_failure:
  # Check what happened on systemd systems.
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'osqueryi --line \"SELECT version, build, platform FROM os_version;\"'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'osqueryi --line \"SELECT version from osquery_info;\"'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'find /usr/share/osquery/packs/ -iname "*.conf" -exec python -mjson.tool {} \;'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ps ax | grep osquery'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'cat /etc/osquery/osquery.conf'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'apt-get install -qy grep'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ls -l /var/log/osquery/'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'egrep \"fim.*CREATED.*fim-testing\" /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep fim-testing /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'egrep \"fim.*CREATED.*fim-[a-z]*\" /var/log/osquery/osqueryd.results.log | wc -l'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'egrep \"fim.*CREATED.*fim-[a-z]*\" /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep fim-testing /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep too_many_events /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep excluded /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'find / -iname \"fim-testing*\""
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ulimit -a'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ls -l /var/osquery/osquery.db/ | wc -l'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'lsof | grep osqueryd'"
  - /sbin/sysctl fs.inotify
  - /sbin/sysctl fs.file-max
  - ulimit -a
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'wc /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'tail -100 /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'strace fallocate -l 1M /tmp/fallocate.test'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'strace fallocate -x -l 1M /tmp/fallocate.test'"
  - strace fallocate -l 1M /tmp/fallocate-host.test
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep SECCOMP /var/log/audit/audit.log'"
  - sudo grep SECCOMP /var/log/audit/audit.log
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'sudo ansible -i localhost, --connection=local -m setup localhost'"

after_script:
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'cat /tmp/idempotency.test'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'netstat -anp'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ss -nlp'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ps auxw'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'systemctl -l --no-pager status osqueryd'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'systemd-analyze security osqueryd'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'journalctl -xe --no-pager'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'ls -lA /tmp/'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'grep -i error /var/log/osquery/osqueryd.results.log'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'sudo grep -i osqueryd /var/log/syslog'"
  - sudo -E su $USER -c "env PATH=$PATH kitchen exec ${suite}-${distribution}-${version//./} -c 'fleetctl get hosts'"
  # Clean up
  - sudo -E su $USER -c "env PATH=$PATH kitchen destroy ${suite}-${distribution}-${version//./}"

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
