---

- name: Import kolide-enroll
  ansible.builtin.import_tasks: kolide-enroll.yml
  when: kolide_local_enroll

- name: Check if osquery is present
  ansible.builtin.stat:
    path: /etc/osquery
  register: has_osquery
- name: Osquery present
  when: has_osquery.stat.exists
  block:
    - name: Ensure directories exist
      ansible.builtin.file:
        dest: "{{ item.d }}"
        state: directory
        mode: "{{ item.m }}"
      with_items:
        - { d: '/var/log/osquery', m: '0755' }
    - name: Push extra osquery packs file
      ansible.builtin.template:
        src: "{{ item }}.conf.j2"
        dest: "/opt/osquery/share/osquery/packs/{{ item | basename }}.conf"
        mode: '0644'
        backup: "{{ osquery_backup | default(false) }}"
      with_items: "{{ osquery_upload_packs }}"
      notify:
        - Restart osquery
        - Restart osquery - docker
    - name: Debug | osquery_packs
      ansible.builtin.debug:
        var: osquery_packs

    - name: Import yara
      ansible.builtin.import_tasks: yara.yml
      when: osquery_yara

    - name: Configure osquery
      ansible.builtin.template:
        src: "{{ osquery_template }}"
        dest: /etc/osquery/osquery.conf
        mode: '0644'
        backup: "{{ osquery_backup | default(false) }}"
        validate: 'echo .quit | osqueryi --config_path %s --config_check --verbose'
        # validate: 'egrep -v '^\s*//' %s | tee /tmp/a | python -mjson.tool'
      notify:
        - Restart osquery
        - Restart osquery - docker
    - name: "Ensure osquery var dir exists"
      ansible.builtin.file:
        state: "directory"
        path: "/var/osquery"
        mode: '0755'
    - name: "Express the osquery secret to disk"
      ansible.builtin.lineinfile:
        path: "/etc/osquery/osquery_enroll_secret"
        line: "{{ osquery_enroll_secret }}"
        state: present
        owner: "root"
        group: "root"
        mode: "0600"
        create: true
      when:
        - osquery_enroll_secret is defined
      notify:
        - Restart osquery
        - Restart osquery - docker
    - name: Configure osquery flags
      ansible.builtin.template:
        src: "osquery.flags.j2"
        dest: /etc/osquery/osquery.flags
        mode: '0644'
        backup: "{{ osquery_backup | default(false) }}"
      notify:
        - Restart osquery
        - Restart osquery - docker
    - name: Re-validate whole osquery config
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          echo .quit | osqueryi --config_path /etc/osquery/osquery.conf --config_check --verbose
      args:
        executable: /bin/bash
      changed_when: false
      register: confcheck
      failed_when: "'error' in confcheck.stdout or 'fail' in confcheck.stdout"
    - name: Logrotate
      when: osquery_logrotate | bool
      block:
        - name: Ensure logrotate package is present
          ansible.builtin.package:
            name: logrotate
            state: present
          register: pkg_result
          until: pkg_result is success
        - name: Add logrotate configuration for osquery log
          ansible.builtin.template:
            src: logrotate-osquery.j2
            dest: /etc/logrotate.d/osquery
            mode: '0644'
            owner: root
            backup: "{{ osquery_backup | default(false) }}"
            validate: 'logrotate -dv %s'
          environment:
            PATH: /usr/sbin:/usr/bin:/sbin:/bin
    - name: Ensure service is enabled and started
      ansible.builtin.service:
        name: osqueryd
        state: started
        enabled: yes
      when:
        - not is_container|bool
    - name: Set fact for monit
      ansible.builtin.set_fact:
        monit_osqueryd: true

- name: FIM
  when: >
    osquery_fim and
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "docker" or
           ansible_virtualization_type == "containerd" or
           ansible_virtualization_type == "container" or
           ansible_virtualization_type == "lxc" or
           ansible_virtualization_type == "VirtualPC")
        )
  block:
    - name: Debug | ansible_virtualization_type
      ansible.builtin.debug:
        var: ansible_virtualization_type
        verbosity: 1
    - name: Review inotify sysctl settings for osquery
      ansible.posix.sysctl:
        name: "{{ item.n }}"
        value: "{{ item.v }}"
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: "{{ item.f | default(omit) }}"
      with_items:
        - { n: 'fs.inotify.max_user_watches', v: '524288' }
        - { n: 'fs.inotify.max_user_instances', v: '1048576', f: '/etc/sysctl.d/10-lxd-inotify.conf' }
        - { n: 'fs.inotify.max_queued_events', v: '32768' }

## ensure no auditd at the same time
## https://osquery.readthedocs.io/en/stable/deployment/process-auditing/
- name: Process auditing
  when: osquery_process_auditing | bool
  block:
    - name: Ensure auditd service is disabled
      ansible.builtin.service:
        name: auditd
        enabled: no
      when:
        - not is_container|bool
    - name: Ensure auditd is present
      ansible.builtin.package:
        name: "{{ _osquery_auditd_pkg }}"
        state: present
      register: pkg_result
      until: pkg_result is success

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Get rsyslog version
  ansible.builtin.set_fact:
    rsyslog_v: "{{ ansible_facts.packages['rsyslog'][0]['version'] }}"

- name: Debug | rsyslog version
  ansible.builtin.debug:
    var: rsyslog_v
    verbosity: 1

# https://osquery.readthedocs.io/en/stable/deployment/syslog/
- name: Rsyslog
  when: osquery_rsyslog | bool
  block:
    - name: Setup rsyslog pipe for osquery communication
      ansible.builtin.template:
        src: osquery-rsyslog.conf.j2
        dest: /etc/rsyslog.d/90-osquery.conf
        mode: '0644'
        backup: "{{ osquery_backup | default(false) }}"
      notify:
        - Restart rsyslog
        - Restart rsyslog - docker

- name: Import syslog-target
  ansible.builtin.import_tasks: syslog-target.yml
  when: osquery_syslog_target is defined and osquery_syslog_target

- name: Import selinux-end
  ansible.builtin.import_tasks: selinux-end.yml
  when: >
    not is_container|bool
    and ansible_os_family == "RedHat"

- name: Import reporting
  ansible.builtin.import_tasks: reporting.yml
  when: osquery_reporting
