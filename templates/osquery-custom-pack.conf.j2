{{ ansible_managed | comment('c') }}
// partly from https://elibing.com/projects/osquery/
//      https://www.alienvault.com/documentation/resources/downloads/osquery.conf
{
  "queries": {
    "arp_anomalies": {
      "query" : "SELECT address, mac, COUNT(mac) AS mac_count FROM arp_cache GROUP BY mac HAVING count(mac) > 1;",
      "description" : "Retrieves interface details.",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "authorized_keys": {
      "query" : "select authorized_keys.* from users join authorized_keys using (uid);",
      "description" : "Info on authorized keys",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "crontab": {
      "query" : "select * from crontab;",
      "version" : "1.4.5",
      "description" : "Retrieves all the jobs scheduled in crontab in the target system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at a given interval",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "dns_resolvers": {
      "query" : "select * from dns_resolvers;",
      "description" : "check DNS resolvers",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "known_hosts": {
      "query" : "select known_hosts.* from users join known_hosts using (uid);",
        "interval" : "{{ osquery_pack_interval_short }}",
        "description" : "line-delimited known_hosts table"
    },
    "etc_hosts": {
      "query" : "select * from etc_hosts;",
      "version" : "1.4.5",
      "description" : "Retrieves all the entries in the target system /etc/hosts file.",
      "value" : "Identify network communications that are being redirected. Example: identify if security logging has been disabled",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "fim_extattr": {
      "query" : "select f.action,f.target_path,f.mode,f.size,f.category,f.time,f.atime,f.ctime,f.mtime,u.uid,u.username,ea.key,from_base64(ea.value) as value from users u, file_events f, extended_attributes ea where u.uid == f.uid and ea.path == f.target_path;",
      "description" : "Retrieves file activity along user and extended attributes.",
{% if osquery_testing or osquery_testing_pause %}
      "interval": "10"
{% else %}
      "interval" : "{{ osquery_pack_interval_short }}"
{% endif %}
    },
    "groups": {
      "query" : "select * from groups;",
      "description" : "Retrieves groups info.",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "interface_details": {
      "query" : "select * from interface_details;",
      "description" : "Retrieves interface details.",
      "interval" : "43200"
    },
    "fileless_process": {
      "query" : "SELECT name, path, pid FROM processes WHERE on_disk = 0;",
      "description" : "Retrieves interface details.",
      "interval" : "{{ osquery_process_interval }}"
    },
    "processes": {
      "query": "SELECT p1.pid, p1.name, p1.path, p1.cmdline, p1.uid, p1.euid, u.username, p1.parent, p1.cwd, p2.name as pname, p2.cmdline as pcmdline from processes as p1, processes as p2, users as u where p1.parent == p2.pid and p1.uid == u.uid and not (p2.name == 'kthreadd' and p1.uid == 0 and p1.parent == 2) ;",
      "description": "Retrieve list of processes",
      "interval" : "{{ osquery_process_interval }}"
    },
    "process_binding_to_ports": {
      "query" : "select DISTINCT process.name, listening.port, listening.protocol, process.pid FROM processes as process JOIN listening_ports AS listening ON process.pid=listening.pid;",
      "description" : "Retrieves the list of processes bound to listening ports.",
      "interval" : "{{ osquery_process_interval }}"
    },
    "process_env": {
      "query" : "select p1.pid, key, value, p2.cmdline from process_envs as p1, processes as p2 where p1.pid == p2.pid and key!='LS_COLORS' and key!='TERMCAP';",
      "interval" : "3600",
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves all the environment variables per process in the target system.",
      "value" : "Insight into the process data: Where was it started from, was it preloaded..."
    },
    "process_open_files": {
      "query" : "select DISTINCT p1.name, p1.pid, p2.pid as ppid, p2.name as pname, u.username, pof.fd, pof.path FROM processes as p1, processes as p2, process_open_files as pof, users as u WHERE p1.pid==pof.pid and p1.parent==p2.pid and p1.uid == u.uid and pof.path != '/dev/null' and pof.path != '/dev/random' and pof.path != '/dev/urandom' and pof.path not like '/dev/pts/%' and pof.path not like '/dev/tty%' and pof.path not like '/var/log/%%' and pof.path not like '/var/lib/prometheus/%%' and pof.path not like '/var/snap/%%/logs/%' and pof.path not like '/var/snap/%%/mysql/%%' and pof.path not like '/var/osquery/osquery.db/%';",
      "description" : "File descriptors for each process enriched with process name, cmdline and parent name",
      "interval" : "{{ osquery_process_interval }}"
    },
    "process_open_sockets": {
      "query" : "select p1.name, p1.pid, p2.pid as ppid, p2.name as pname, u.username, pos.local_address, pos.local_port, pos.remote_address, pos.remote_port, pos.protocol, pos.path, pos.state FROM processes as p1, processes as p2, process_open_sockets as pos, users as u WHERE p1.pid==pos.pid and p1.parent==p2.pid and p1.uid == u.uid and pos.remote_address != '0.0.0.0' and pos.remote_address != '::' and not (pos.remote_address == '' and pos.path == '') and not (pos.local_address == '127.0.0.1' and pos.remote_address == '127.0.0.1') and not (pos.local_address like '10.%' and pos.remote_address like '10.%') and not (pos.local_address like '192.168.%' and pos.remote_address like '192.168.%') and pos.remote_port != 123;",
      "description" : "File sockets for each process enriched with process name, cmdline and parent name",
      "interval" : "{{ osquery_process_interval }}"
    },
    // FIXME! performance impacting! = higher interval
    "outbound_connections": {
      "query": "select user.username, p1.name, hash.md5, socket.pid, p1.path, p1.cmdline, p2.cmdline as pcmdline, socket.local_port, socket.remote_port, socket.remote_address from process_open_sockets as socket, processes as p1, processes as p2, users as user, hash as hash where socket.local_port not in (select port from listening_ports) and socket.local_port != 0 and socket.pid = p1.pid and user.uid = p1.uid and hash.path = p1.path and p1.parent == p2.pid;",
      "interval" : "{{ osquery_socket_interval }}",
      "description": ""
    },
    "python_packages": {
      "query" : "select * FROM python_packages;",
      "interval" : "{{ osquery_pack_interval_long }}",
      "description" : "Python packages installed in a system"
    },
    "sudoers": {
      "query" : "select * from sudoers;",
      "description" : "Retrieves all the information for sudoers.",
      "interval" : "{{ osquery_pack_interval_short }}"
    },
    "suid_bin": {
      "query": "select * from suid_bin;",
      "interval": "{{ osquery_pack_interval_short }}",
      "platform": "all",
      "description": "Retrieves s/guid executables"
    },
    "users": {
      "query" : "select * from users;",
      "interval" : "{{ osquery_pack_interval_short }}",
      "description" : "Retrieves users info."
    },
    "user_ssh_keys": {
      "query" : "select user_ssh_keys.* from users join user_ssh_keys using (uid);",
      "description" : "info on user ssh keys",
      "interval" : "{{ osquery_pack_interval_short }}"
{% if ansible_os_family == "Darwin" %}
    },
    "launchd_keep_alive_children": {
      "query" : "SELECT name, program || program_arguments AS executable FROM launchd WHERE (run_at_load = 'true' AND keep_alive = 'true') AND (program != '' OR program_arguments != '');",
      "interval" : "{{ osquery_pack_interval_short }}",
      "description" : "Find every OS X LaunchDaemon that launches an executable and keeps it running"
    }
{% else %}
    }
{% endif %}
  }
}
